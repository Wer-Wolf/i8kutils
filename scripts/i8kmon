#!/usr/bin/env tclsh
#
# i8kmon -- Monitor the temperature on Dell laptops.
#
# Copyright (C) 2013-2017  Vitor Augusto <vitorafsr@gmail.com>
# Copyright (C) 2001-2005  Massimo Dal Zotto <dz@debian.org>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

array set config {
    sysconfig	/etc/i8kmon.conf
    verbose	0
    timeout	2
    num_configs	5
    0		{{0 0}  -1  60  -1  65}
    1		{{1 0}  50  70  55  75}
    2		{{1 1}  60  80  65  85}
    3		{{2 1}  65  85  70  90}
    4		{{2 2}  70 128  75 128}
}

array set status {
    nfans	2
    acpi_timer	0
    state	0
    temp	0
    lstate	-2
    rstate	-2
    ac		0
    t_low	0
    t_high	0
}

proc i8kfan {{left "-"} {right "-"}} {
    if {$left != "-"} {
        catch {exec "i8kctl" "-s" "fan" "-n" "2" $left}
    }
    if {$right != "-"} {
        catch {exec "i8kctl" "-s" "fan" "-n" "1" $right}
    }

    if {[catch {exec "i8kctl" "-s" "fan" "-n" "2"} new_left]} {
        set new_left -1
    }

    if {[catch {exec "i8kctl" "-s" "fan" "-n" "1"} new_right]} {
        set new_right -1
    }

    return [list $new_left $new_right]
}

proc i8kctl {cmd} {
    switch $cmd {
        "temp" {
            if {[catch {exec "i8kctl" "-s" "temp" "-n" "1"} temp]} {
                return -1;
            }

            return $temp
        }
        default {
            return [list -1 -1]
        }
    }
}


proc read_config {} {
    global config
    global status

    # read system config file
    if {[file exists $config(sysconfig)]} {
    	source $config(sysconfig)
	if {$config(verbose) > 0} {
	    puts "reading system config file"
	}
    }

    for {set key 0}  {$key < $config(num_configs)} {incr key} {
	set fans  [lindex $config($key) 0]
	set lo_ac [lindex $config($key) 1]
	set hi_ac [lindex $config($key) 2]
	set lo_bt [lindex $config($key) 3]
	set hi_bt [lindex $config($key) 4]

	# check that for each key hi temp > lo temp
	if {$lo_ac > $hi_ac} { set hi_ac [expr $lo_ac + 5]}
	if {$lo_bt > $hi_bt} { set hi_bt [expr $lo_bt + 5]}

	# set temperature to -1 to lo_ac and lo_bt at config(0)
	if {$key == 0} {
	    set lo_ac -1
	    set lo_bt -1
	}

	# set temperature to 128 to hi_ac and hi_bt at config(3)
	if {$key ==  [expr $config(num_configs)-1] } {
	    set hi_ac 128
	    set hi_bt 128
	}

	set config($key) [list $fans $lo_ac $hi_ac $lo_bt $hi_bt]
    }
}

proc status_timer {} {
    global config
    global status

    # Reschedule status timer
    after [expr $config(timeout)*1000] {status_timer}

    check_status
}

proc check_status {} {
    global config
    global status

    if {![read_i8k_status]} {
	return
    }

    fan_control
}

proc read_i8k_status {} {
    global config
    global status

    set temp [i8kctl "temp"]
    set status(temp) $temp
    set state [i8kfan]
    set status(lstate) [lindex $state 0]
    set status(rstate) [lindex $state 1]

    read_ac_status

    if {$config(verbose) > 0} {
        puts "temp, left fan state, right fan state, ac state: $status(temp) $status(lstate) $status(rstate) $status(ac)"
    }

    return 1
}

proc read_ac_status {} {
    global config
    global status

    # Read ac status once per minute
    if {[incr status(acpi_timer) -1] > 0} {
        return 1
    }

    set status(acpi_timer) [expr 60 / $config(timeout)]

    if {[catch {exec "acpi" "-a"} result]} {
        # Assume AC power when execution fails
        set status(ac) 1

        return 0
    }

    if {[string match *on-line* $result]} {
        set status(ac) 1
    } else {
        set status(ac) 0
    }

    if {$config(verbose) > 0} {
        puts "[clock seconds] acpi status: $result"
    }

    return 0
}

proc fan_control {} {
    global config
    global status

    set index [expr $status(ac) ? 1 : 3]
    set state $status(state)
    set temp  $status(temp)

    set status(t_low)  [lindex $config($state) $index]
    set status(t_high) [lindex $config($state) [expr $index+1]]

    while {$temp < 128 && $temp >= $status(t_high)} {
	if {$config(verbose) > 0} {
	    puts -nonewline "# ($temp>=$status(t_high)), "
	}
	incr state
	set status(t_low)  [lindex $config($state) $index]
	set status(t_high) [lindex $config($state) [expr $index+1]]
	if {$config(verbose) > 0} {
	    puts "state=$state, low=$status(t_low), high=$status(t_high)"
	}
    }

    while {$temp > 0 && $temp <= $status(t_low)} {
	if {$config(verbose) > 0} {
	    puts -nonewline "# ($temp<=$status(t_low)), "
	}
	incr state -1
	set status(t_low)  [lindex $config($state) $index]
	set status(t_high) [lindex $config($state) [expr $index+1]]
	if {$config(verbose) > 0} {
	    puts "state=$state, low=$status(t_low), high=$status(t_high)"
	}
    }

    set_fan $state
}

proc set_fan {state} {
    global config
    global status

    set status(state) $state
    set args [lindex $config($state) 0]

    set left [lindex $args 0]
    set right [lindex $args 1]

    if {$status(lstate) == -1 || $left == $status(lstate)} {
        set left "-"
    } else {
        set status(lstate) $left
    }

    if {$status(rstate) == -1 || $right == $status(rstate)} {
        set right "-"
    } else {
        set status(rstate) $right
    }

    if {$status(nfans) < 2} { set right "-" }

    if {$left == "-" && $right == "-"} {return}
    
    if {$config(verbose) > 0} {
        puts "i8kfan $left $right"
    }

    i8kfan $left $right
}

proc usage {} {
    global argv0

    regsub -all {^.*/} $argv0 {} progname
    puts "Usage:  $progname \[<options>...]\n"
    puts "Options:\n"
    puts "    -v|--verbose            report log to stdout"
    puts "    -t|--timeout <secs>     set poll timeout\n"
}

proc parse_options {} {
    global config
    global status
    global argv

    for {set i 0} {$i < [llength $argv]} {incr i} {
	set arg [lindex $argv $i]
	switch -- $arg {
	    -\? - -h - -help - --help {
		usage
		exit
	    }
	    --verbose - -v {
		set config(verbose) 1
	    }
	    --timeout - -t {
		set config(timeout) [lindex $argv [incr i]]
	    }
	    -- {
		continue
	    }
	    default {
		puts stderr "invalid option: $arg"
		exit 1
	    }
	}
    }

    if {$config(verbose) > 0} {
	puts "i8kmon"
	parray config
	parray status
    }
}

proc main {} {
    global status

    read_config
    parse_options
    status_timer
}

if {$tcl_interactive == 0} {
    main
    vwait forever
}
