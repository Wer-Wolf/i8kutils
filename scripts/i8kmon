#!/usr/bin/env tclsh
#
# i8kmon -- Monitor the temperature on Dell laptops.
#
# Copyright (C) 2013-2017  Vitor Augusto <vitorafsr@gmail.com>
# Copyright (C) 2001-2005  Massimo Dal Zotto <dz@debian.org>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

array set config {
    sysconfig	/etc/i8kmon.conf
    verbose	0
    timeout	2
    num_configs	5
    0		{{0 0}  -1  60  -1  65}
    1		{{1 0}  50  70  55  75}
    2		{{1 1}  60  80  65  85}
    3		{{2 1}  65  85  70  90}
    4		{{2 2}  70 128  75 128}
}

array set status {
    state	0
    ac		0
}

proc get_temp {number} {
    set temp [exec "i8kctl" "-s" "temp" "-n" $number]

    return $temp
}

proc get_fan_state {number} {
    set state [exec "i8kctl" "-s" "fan" "-n" $number]

    return $state
}

proc set_fan_state {number state} {
    exec "i8kctl" "-s" "fan" "-n" $number $state

    return
}

proc read_config {} {
    global config
    global status

    # read system config file
    if {[file exists $config(sysconfig)]} {
    	source $config(sysconfig)
	    if {$config(verbose) > 0} {
	        puts "reading system config file"
	    }
    }

    for {set key 0}  {$key < $config(num_configs)} {incr key} {
        lassign $config($key) fans lo_ac hi_ac lo_bt hi_bt

	    # check that for each key hi temp > lo temp
	    if {$lo_ac > $hi_ac} {
            set hi_ac [expr $lo_ac + 5]
        }
	    if {$lo_bt > $hi_bt} {
            set hi_bt [expr $lo_bt + 5]
        }

	    # set temperature to -1 to lo_ac and lo_bt at config(0)
	    if {$key == 0} {
	        set lo_ac -1
	        set lo_bt -1
	    }

	    # set temperature to 128 to hi_ac and hi_bt at config(3)
	    if {$key ==  [expr $config(num_configs)-1] } {
	        set hi_ac 128
	        set hi_bt 128
	    }

	    set config($key) [list $fans $lo_ac $hi_ac $lo_bt $hi_bt]
    }
}

proc status_timer {} {
    global config

    # Reschedule status timer
    after [expr $config(timeout)*1000] {status_timer}

    fan_control
}

proc ac_status_timer {} {
    global config
    global status

    if {[catch {exec "acpi" "-a"} result]} {
        # Assume AC power when execution fails
        set status(ac) 1
    } else {
        if {[string match *on-line* $result]} {
            set status(ac) 1
        } else {
            set status(ac) 0
        }
    }

    if {$config(verbose) > 0} {
        puts "[clock seconds] acpi status: $result"
    }

    # Read AC status once per minute
    after 60000 ac_status_timer

    return
}

proc fan_control {} {
    global config
    global status

    set index [expr $status(ac) ? 1 : 3]
    set state $status(state)

    if {[catch {get_temp 1} temp]} {
        if {$config(verbose) > 0} {
            puts "Unable to get temperature"
        }

        return
    }

    set t_low [lindex $config($state) $index]
    set t_high [lindex $config($state) [expr $index+1]]

    while {$temp < 128 && $temp >= $t_high} {
	    if {$config(verbose) > 0} {
	        puts -nonewline "# ($temp>=$t_high), "
	    }
	    incr state
	    set t_low  [lindex $config($state) $index]
	    set t_high [lindex $config($state) [expr $index+1]]
	    if {$config(verbose) > 0} {
	        puts "state=$state, low=$t_low, high=$t_high"
	    }
    }

    while {$temp > 0 && $temp <= $t_low} {
	    if {$config(verbose) > 0} {
	        puts -nonewline "# ($temp<=$t_low), "
	    }
	    incr state -1
	    set t_low  [lindex $config($state) $index]
	    set t_high [lindex $config($state) [expr $index+1]]
	    if {$config(verbose) > 0} {
	        puts "state=$state, low=$t_low, high=$t_high"
	    }
    }

    set status(state) $state

    set_fans [lindex $config($state) 0]
}

# The fan state order is reversed (..., fan 3, fan 2, fan 1) due
# to backwards compatibility
proc set_fans {states} {
    global config
    set fan_number 0

    foreach state [lreverse $states] {
        incr fan_number

        if {$state == "-"} {
            continue
        }

        # Only update fan state if current fan state is different
        if {![catch {get_fan_state $fan_number} current]} {
            if {$state == $current} {
                if {$config(verbose > 0} {
                    puts "Skipping fan number $fan_number"
                }
                continue
            }
        }

        if {[catch {set_fan_state $fan_number $state}]} {
            if {$config(verbose) > 0} {
                puts "Unable to set fan state for fan $fan_number"
            }
        }
    }

    return
}

proc usage {} {
    global argv0

    regsub -all {^.*/} $argv0 {} progname
    puts "Usage:  $progname \[<options>...]\n"
    puts "Options:\n"
    puts "    -v|--verbose            report log to stdout"
    puts "    -t|--timeout <secs>     set poll timeout\n"
}

proc parse_options {} {
    global config
    global status
    global argv

    for {set i 0} {$i < [llength $argv]} {incr i} {
	set arg [lindex $argv $i]
	switch -- $arg {
	    -\? - -h - -help - --help {
		usage
		exit
	    }
	    --verbose - -v {
		set config(verbose) 1
	    }
	    --timeout - -t {
		set config(timeout) [lindex $argv [incr i]]
	    }
	    -- {
		continue
	    }
	    default {
		puts stderr "invalid option: $arg"
		exit 1
	    }
	}
    }

    if {$config(verbose) > 0} {
	puts "i8kmon"
	parray config
	parray status
    }
}

if {$tcl_interactive == 0} {
    read_config
    parse_options
    ac_status_timer
    status_timer

    vwait forever
}
