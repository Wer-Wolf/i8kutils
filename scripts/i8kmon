#!/usr/bin/env tclsh
#
# i8kmon -- Monitor the temperature on Dell laptops.
#
# Copyright (C) 2013-2017  Vitor Augusto <vitorafsr@gmail.com>
# Copyright (C) 2001-2005  Massimo Dal Zotto <dz@debian.org>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

package require logger

set log [logger::init i8kmon]
${log}::setlevel notice

array set config {
    verbose     0
    ondemand    0
    timeout     2
    num_configs 5
    0           {{0 0}  -1  60  -1  65}
    1           {{1 0}  50  70  55  75}
    2           {{1 1}  60  80  65  85}
    3           {{2 1}  65  85  70  90}
    4           {{2 2}  70 128  75 128}
}

array set status {
    state	0
    ac		0
}

proc get_temp {number} {
    set temp [exec "i8kctl" "-s" "temp" "-n" $number]

    return $temp
}

proc get_fan_state {number} {
    set state [exec "i8kctl" "-s" "fan" "-n" $number]

    return $state
}

proc set_fan_state {number state} {
    exec "i8kctl" "-s" "fan" "-n" $number $state

    return
}

proc read_config {path} {
    global config

    if {[file exists $path]} {
        source $path
    }

    return
}

proc validate_config {} {
    global config
    global log

    if {$config(verbose) > 0} {
        ${log}::setlevel debug
    }

    for {set key 0}  {$key < $config(num_configs)} {incr key} {
        lassign $config($key) fans lo_ac hi_ac lo_bt hi_bt

	    # check that for each key hi temp > lo temp
	    if {$lo_ac > $hi_ac} {
            set hi_ac [expr $lo_ac + 5]
        }
	    if {$lo_bt > $hi_bt} {
            set hi_bt [expr $lo_bt + 5]
        }

	    set config($key) [list $fans $lo_ac $hi_ac $lo_bt $hi_bt]

        ${log}::debug "Config $key: battery = $lo_ac - $hi_ac, ac = $lo_ac - $hi_ac"
    }
}

proc status_timer {} {
    global config

    # Reschedule status timer
    after [expr $config(timeout)*1000] {status_timer}

    fan_control
}

proc ac_status_timer {} {
    global config
    global status
    global log

    if {[catch {exec "acpi" "-a"} result]} {
        # Assume AC power when execution fails
        set status(ac) 1
    } else {
        if {[string match *on-line* $result]} {
            set status(ac) 1
        } else {
            set status(ac) 0
        }
    }

    ${log}::info "ac status: $status(ac) ($result)"

    # Read AC status once per minute
    after 60000 ac_status_timer

    return
}

proc fan_control {} {
    global config
    global status
    global log

    set index [expr $status(ac) ? 1 : 3]
    set state $status(state)

    ${log}::info "Current state: $state"

    if {[catch {get_temp 1} temp]} {
        ${log}::warn "Unable to get temperature"

        return
    }

    for {} {$state < [expr $config(num_configs) - 1]} {incr state} {
        set t_high [lindex $config($state) [expr $index + 1]]

        if {$temp < $t_high} {
            break
        }

        ${log}::debug "Temperature above state $state threshold ($t_high)"
    }

    for {} {$state > 0} {incr state -1} {
        set t_low [lindex $config($state) $index]

        if {$temp > $t_low} {
            break
        }

        ${log}::debug "Temperature below state $state threshold ($t_low)"
    }

    # When ondemand is set, fan speed updates only happen at status change
    if {!($state == $status(state) && $config(ondemand) > 0)} {
        set_fans [lindex $config($state) 0]
    }

    set status(state) $state
}

# The fan state order is reversed (..., fan 3, fan 2, fan 1) due
# to backwards compatibility
proc set_fans {states} {
    global log

    set fan_number 0

    foreach state [lreverse $states] {
        incr fan_number

        if {$state == "-"} {
            continue
        }

        # Only update fan state if current fan state is different
        if {![catch {get_fan_state $fan_number} current]} {
            if {$state == $current} {
                ${log}::info "Skipping fan number $fan_number"
                continue
            }
        }

        if {[catch {set_fan_state $fan_number $state}]} {
            ${log}::warn "Unable to set fan state for fan number $fan_number"
        }
    }

    return
}

proc usage {} {
    global argv0

    regsub -all {^.*/} $argv0 {} progname
    puts "Usage:  $progname \[<options>...]\n"
    puts "Options:\n"
    puts "    -v|--verbose            report verbose information"
    puts "    -t|--timeout <secs>     set poll timeout\n"
}

proc parse_options {} {
    global config
    global status
    global argv

    for {set i 0} {$i < [llength $argv]} {incr i} {
	set arg [lindex $argv $i]
	switch -- $arg {
	    -\? - -h - -help - --help {
		usage
		exit
	    }
	    --verbose - -v {
		set config(verbose) 1
	    }
	    --timeout - -t {
		set config(timeout) [lindex $argv [incr i]]
	    }
	    -- {
		continue
	    }
	    default {
		puts stderr "invalid option: $arg"
		exit 1
	    }
	}
    }
}

if {$tcl_interactive == 0} {
    read_config "/etc/i8kmon.conf"
    parse_options
    validate_config
    ac_status_timer
    status_timer

    vwait forever
}
